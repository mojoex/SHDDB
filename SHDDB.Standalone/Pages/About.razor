@page "/"

@inject HttpClient Http

@using SHDDB.DTO.Configuration
@using System.Text.Json
@using System.Text.Json.Nodes

<!-- Main Content -->
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Width="80%" Elevation="3" Class="pa-4">
        <MudStack Spacing="4">
            <MudText Align=Align.Center Typo="Typo.h4">Welcome to SHDDB</MudText>
            @if (LatestVersion == null)
            {
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" />
            }
            else
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
                    <MudChip T="string" Text="@LatestVersion" Variant="Variant.Outlined" Color="Color.Success"/>
                    <MudChip T="string" Text="@TitleUpdate" Variant="Variant.Outlined" Color="Color.Secondary" />
                </MudStack>
            }
            <MudDivider />
            <MudText Align=Align.Center Typo="Typo.body1" Class="mt-2">
                SHDDB is a work in progress! We're continuously adding new content and features.
            </MudText>
            <MudDivider />
            <MudText Align="Align.Center" Typo="Typo.h5" GutterBottom>Progress Tracker</MudText>
            <MudStack Row Justify="Justify.SpaceEvenly" Wrap="Wrap.Wrap">
                @if (!GithubIssues.Any())
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle"/>
                }
                else
                {
                    foreach (var githubIssue in GithubIssues)
                    {
                        <MudCard Style="@($"background: {CustomTheme.Theme.PaletteDark.Dark}")">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
                                        <MudText Typo="Typo.h6">@githubIssue.Key</MudText>
                                    </MudStack>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudList T="string">
                                    @foreach (var issue in githubIssue.Value.Where(x => x.InProgress))
                                    {
                                        <MudListItem Href="@issue.Url">
                                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" StretchItems="StretchItems.Start">
                                                <MudTooltip Text="In Progress" Delay="500" Placement="Placement.Left">
                                                    <MudStack Row AlignItems="AlignItems.Start">
                                                        <MudProgressCircular Color="Color.Info" Indeterminate Size="Size.Small" />
                                                        <MudDivider FlexItem Vertical />
                                                        <MudText Typo="Typo.body2">@issue.Title</MudText>
                                                    </MudStack>
                                                </MudTooltip>
                                                <MudSpacer/>
                                                @foreach (var label in issue.Labels)
                                                {
                                                    <MudChip T="string" Color="@(label == "bug" ? Color.Error : Color.Warning)" Text="@label" Variant="Variant.Text" Size="Size.Small" />
                                                }
                                            </MudStack>
                                        </MudListItem>
                                    }
                                    @if (githubIssue.Value.Any(x => x.InProgress) && githubIssue.Value.Any(x => !x.InProgress))
                                    {
                                        <MudDivider DividerType="DividerType.Middle" />
                                    }
                                    @foreach (var issue in githubIssue.Value.Where(x => !x.InProgress))
                                    {
                                        <MudListItem Href="@issue.Url">
                                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" StretchItems="StretchItems.Start">
                                                <MudTooltip Text="Not Started" Delay="500" Placement="Placement.Left">
                                                    <MudStack Row AlignItems="AlignItems.Start">
                                                        <MudIcon Icon="@Icons.Material.Outlined.Circle" Size="Size.Small" />
                                                        <MudDivider FlexItem Vertical />
                                                        <MudText Typo="Typo.body2">@issue.Title</MudText>
                                                    </MudStack>
                                                </MudTooltip>
                                                @foreach (var label in issue.Labels)
                                                {
                                                    <MudChip T="string" Color="@(label == "bug" ? Color.Error : Color.Warning)" Text="@label" Variant="Variant.Text" Size="Size.Small" />
                                                }
                                            </MudStack>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudCardContent>
                        </MudCard>
                    }
                }
            </MudStack>
        </MudStack>

    </MudPaper>

    <!-- Changelog Section -->
    <MudPaper Width="80%" Elevation="2" Class="mt-4 pa-4">
        <MudText Typo="Typo.h5" GutterBottom>Changelog</MudText>
        <MudList T="string">
            @if (!Releases.Any())
            {
                <MudListItem>
                    <MudSkeleton SkeletonType="SkeletonType.Text"/>
                </MudListItem>
            }
            else
            {
                @foreach (var release in Releases.OrderByDescending(x => x.Date))
                {
                    <MudListItem Href="@release.Uri">
                        <MudStack>
                            <MudStack Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                                @if (release.Version == LatestVersion)
                                {
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small" Variant="Variant.Outlined">latest</MudChip>
                                }
                                <MudText Typo="Typo.body1"><b>@release.Version (@release.Date.ToLongDateString())</b></MudText>
                            </MudStack>
                            @foreach (var change in release.Notes)
                            {
                                <MudText Typo="Typo.body2">@change</MudText>
                            }
                        </MudStack>
                    </MudListItem>
                }
            }
        </MudList>
    </MudPaper>
</MudContainer>

@code {
    private string LatestVersion => Releases.FirstOrDefault()?.Version ?? "v0.0.1";
    private string? TitleUpdate { get; set; }
    private Dictionary<string, List<GithubIssue>> GithubIssues = [];
    private List<Release> Releases = [];

    protected override async Task OnInitializedAsync()
    {
        var appJson = await Http.GetFromJsonAsync<JsonDocument>("/app.json");

        TitleUpdate = appJson.RootElement.GetProperty("titleUpdate").GetString();

        await GetGithubIssues();

        await GetChangelog();
    }

    private async Task GetChangelog()
    {
        Releases = [];

        Http.DefaultRequestHeaders.Add("Accept", "application/vnd.github+json");
        var releases = await Http.GetFromJsonAsync<JsonDocument>("https://api.github.com/repos/mojoex/shddb/releases");

        foreach (var release in releases.RootElement.EnumerateArray())
        {
            Release releaseEntry = new();

            if (release.TryGetProperty("tag_name", out var tagNameProperty))
            {
                releaseEntry.Version = tagNameProperty.GetString();
            }

            if (release.TryGetProperty("published_at", out var publishedAtProperty))
            {
                releaseEntry.Date = publishedAtProperty.GetDateTime();
            }

            if (release.TryGetProperty("html_url", out var uriProperty))
            {
                releaseEntry.Uri = uriProperty.GetString();
            }

            if (release.TryGetProperty("body", out var bodyProperty))
            {
                foreach (var change in bodyProperty.GetString().Split("\n"))
                {
                    if (string.IsNullOrWhiteSpace(change) || !change.StartsWith('*'))
                    {
                        continue;
                    }

                    releaseEntry.Notes.Add(change);
                }
            }

            Releases.Add(releaseEntry);
        }
    }

    private async Task GetGithubIssues()
    {
        GithubIssues = [];

        Http.DefaultRequestHeaders.Add("Accept", "application/vnd.github+json");
        var issues = await Http.GetFromJsonAsync<JsonDocument>("https://api.github.com/repos/mojoex/SHDDB/issues?state=open");

        foreach (var issue in issues.RootElement.EnumerateArray())
        {
            GithubIssue githubIssue = new();

            string milestone = "Uncategorized";

            if (issue.TryGetProperty("milestone", out var milestoneProperty))
            {
                milestone = milestoneProperty.GetProperty("title").GetString();
            }

            if (!issue.TryGetProperty("title", out var titleProperty))
            {
                continue;
            }

            githubIssue.Title = titleProperty.GetString();

            if (issue.TryGetProperty("assignee", out var assigneeProperty))
            {
                if (assigneeProperty.ValueKind != JsonValueKind.Null)
                {
                    githubIssue.InProgress = true;
                }
            }

            githubIssue.Url = issue.GetProperty("html_url").GetString();
            githubIssue.Labels = issue.GetProperty("labels").EnumerateArray().Select(x => x.GetProperty("name").GetString()).ToList();

            if (GithubIssues.TryGetValue(milestone, out var githubMilestone))
            {
                githubMilestone.Add(githubIssue);
            }
            else
            {
                GithubIssues.Add(milestone, [githubIssue]);
            }
        }
    }

    class GithubIssue
    {
        internal string Title { get; set; }

        internal string Url { get; set; }

        internal List<string> Labels { get; set; }

        internal bool InProgress { get; set; }
    }
}
