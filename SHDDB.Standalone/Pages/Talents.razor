@page "/"
@page "/talents"

@attribute [StreamRendering(true)]

@using SHDDB.Standalone.Components.Talents
@using System.Web

<PageTitle>Talents</PageTitle>

@* Filtering Paper *@
<MudPaper MinWidth="100%" Elevation="25" Class="pa-4 mt-4">
    <MudStack Row StretchItems="StretchItems.End" Spacing="2">
        @* Page View Style *@
        <MudMenu Icon="@Icons.Material.Filled.FilterList" Class="ml-2" Variant="Variant.Filled" Dense>
            <MudMenuItem Icon="@Icons.Material.Filled.List" @onclick="() => _listView = true" />
            <MudMenuItem Icon="@Icons.Material.Filled.GridView" @onclick="() => _listView = false" />
        </MudMenu>

        @* Filter Menu *@
        <MudMenu Icon="@Icons.Material.Filled.FilterAlt" Variant="Variant.Filled" Dense>
            <MudMenuItem Label="Clear" OnClick="ClearFilters" Style="text-align: center" />
            <MudMenuItem>
                <MudCheckBox T="bool" Dense Label="Gearsets" @bind-Value=TalentFilters.Types.Gearset />
            </MudMenuItem>
            <MudDivider />
            <MudMenuItem>
                <MudCheckBox T="bool" Dense Label="Backpack" @bind-Value=TalentFilters.Slots.Backpack />
            </MudMenuItem>
            <MudMenuItem>
                <MudCheckBox T="bool" Dense Label="Chest" @bind-Value=TalentFilters.Slots.Chest />
            </MudMenuItem>
            <MudMenuItem>
                <MudCheckBox T="bool" Dense Label="Weapon" @bind-Value=TalentFilters.Slots.Weapon />
            </MudMenuItem>
            <MudDivider />
            <MudMenuItem>
                <MudCheckBox T="bool" Dense Label="High-End" @bind-Value=TalentFilters.Types.HighEnd />
            </MudMenuItem>
            <MudMenuItem>
                <MudCheckBox T="bool" Dense Label="Perfect" @bind-Value=TalentFilters.Types.Perfect />
            </MudMenuItem>
            <MudMenuItem>
                <MudCheckBox T="bool" Dense Label="Exotic" @bind-Value=TalentFilters.Types.Exotic />
            </MudMenuItem>
        </MudMenu>

        <MudDivider Vertical="true" FlexItem />
        <MudButton OnClick=ToggleExpandAll Size=Size.Small Variant="Variant.Filled">@(_allExpanded ? "Collapse All" : "Expand All")</MudButton>
        <MudDivider Vertical="true" FlexItem />
        <MudButton OnClick=ToggleShowUnpinned Size=Size.Small Variant="Variant.Filled">@(_showUnpinned ? "Hide Unpinned" : "Show Unpinned")</MudButton>
        <MudDivider Vertical="true" FlexItem />

        @* Search Field *@
        <MudTextField T="string" Label="Search.. " @bind-Value=_searchText Variant=Variant.Outlined DebounceInterval="500" Immediate />
    </MudStack>
</MudPaper>

<MudDivider DividerType="DividerType.Middle" Class="my-6" />

@if (_listView)
{
    @* <MudExpansionPanels MultiExpansion="true" Outlined="false">
        @foreach (var talent in CurrentTalents)
        {
            <MudExpansionPanel Text="@talent.Name">
                <TalentCard WrappedTalent="@talent" />
            </MudExpansionPanel>
        }
    </MudExpansionPanels> *@
}
else
{
    <MudStack AlignItems="AlignItems.Start" Justify="Justify.Center" Row Wrap="Wrap.Wrap">
        @if (!TalentDictionary.Any())
        {
            @TalentSkeletonFragment
        }

        @foreach (var talent in GetDisplayedTalents())
        {
            <TalentCard @key=talent.Name Talent="@talent" ForceExpand="_allExpanded" OnPin="HandlePin" />
        }
    </MudStack>
}


@code {
    private Dictionary<string, (TalentData Talent, TalentUiState State)> TalentDictionary { get; set; } = [];
    private TalentFilters TalentFilters = new();

    private bool _listView = false;
    private bool _filtersOpen = false;
    private string _searchText { get; set; } = string.Empty;

    private bool _allExpanded { get; set; } = false;

    private bool _showUnpinned { get; set; } = true;

    private RenderFragment TalentSkeletonFragment =>@<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="350px" Height="125px" />;

    protected override async Task OnInitializedAsync()
    {
        TalentDictionary = await Task.Run(() => StaticData.Talents.ToDictionary(x => x.Name, x => (x, new TalentUiState())));
    }

    private IEnumerable<TalentData> GetDisplayedTalents()
    {
        if (!_showUnpinned)
        {
            return TalentDictionary.Where(x => x.Value.State.IsPinned && MatchesFilters(x.Value.Talent))
                .OrderBy(x => x.Key)
                .Select(x => x.Value.Talent);
        }

        return TalentDictionary.Where(x => x.Value.State.IsPinned && MatchesFilters(x.Value.Talent)).Select(x => x.Value.Talent)
            .Union(TalentDictionary.Where(x => !x.Value.State.IsPinned && MatchesFilters(x.Value.Talent))
            .OrderBy(x => x.Value.State.IsPinned)
            .ThenBy(x => x.Key)
            .Select(x => x.Value.Talent));
    }

    private bool DisplayPinnedOnly(bool isPinned)
    {
        if (_showUnpinned)
        {
            return true;
        }

        return isPinned;
    }

    private void HandlePin(string talentName)
    {
        TalentDictionary[talentName].State.IsPinned = !TalentDictionary[talentName].State.IsPinned;
    }

    private void ToggleShowUnpinned()
    {
        _showUnpinned = !_showUnpinned;
    }

    private void ToggleExpandAll()
    {
        _allExpanded = !_allExpanded;
    }

    private void ToggleFilters()
    {
        _filtersOpen = !_filtersOpen;
    }

    private void ClearFilters()
    {
        TalentFilters = new();

        _searchText = string.Empty;
    }

    private bool MatchesFilters(TalentData talent)
    {
        if (!TalentFilters.HasFilters)
        {
            return MatchesTextFilter(talent);
        }

        var selectedTypeFilters = TalentFilters.GetTypeFilters();
        var slotFilters = TalentFilters.GetSlotFilters();

        return MatchesTypeFilters(talent, selectedTypeFilters) && 
            MatchesSlotFilters(talent, slotFilters) && 
            MatchesGearsetFilter(talent, selectedTypeFilters) &&
            MatchesTextFilter(talent);
    }

    private bool MatchesSlotFilters(TalentData talent, List<Slot> slotFilters)
    {
        if (!slotFilters.Any())
        {
            return true;
        }

        return slotFilters.Contains(talent.Slot);
    }

    private bool MatchesTypeFilters(TalentData talent, List<TalentType> selectedTypeFilters)
    {
        if (!selectedTypeFilters.Any())
        {
            return true;
        }

        return selectedTypeFilters.Contains(talent.Type);
    }

    private bool MatchesGearsetFilter(TalentData talent, List<TalentType> selectedTypeFilters)
    {
        if (!TalentFilters.Types.Gearset)
        {
            return true;
        }

        return talent.Type == TalentType.GearsetBase;
    }

    private bool MatchesTextFilter(TalentData talent)
    {
        if (string.IsNullOrEmpty(_searchText))
        {
            return true;
        }

        return talent.Name.StartsWith(_searchText, StringComparison.OrdinalIgnoreCase);
    }
}
