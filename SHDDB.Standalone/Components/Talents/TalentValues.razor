@using System.Text
<MudStack Class="pa-4">
    @foreach (var talentValue in Talent.Values)
    {
        <MudStack>
            <MudStack Row Class="pa-2">
                <MudIcon Icon="@GetIconForValueType(talentValue)" Color="@GetIconColorForValueType(talentValue)" />
                <MudText>
                    @((MarkupString)TalentContent.GetValueDescription(talentValue, UseChest, UseBackpack))
                </MudText>
            </MudStack>
            @if (talentValue.IsConditional)
            {
                <MudAlert Icon="@Icons.Material.Filled.Directions" ContentAlignment="HorizontalAlignment.Left">@talentValue.Condition</MudAlert>
            }
            @if (!string.IsNullOrEmpty(talentValue.Note))
            {
                <MudAlert Icon="@Icons.Material.Filled.Info" ContentAlignment="HorizontalAlignment.Left">@talentValue.Note</MudAlert>
            }
        </MudStack>
    }
</MudStack>

@code {
    [Parameter] public required TalentData Talent { get; set; }
    [Parameter] public bool UseChest { get; set; } = false;
    [Parameter] public bool UseBackpack { get; set; } = false;

    private string GetIconForValueType(TalentValueData talentValue)
    {
        if (talentValue.TargetStat == Stat.AMP && talentValue.ApplicationType == TalentValueType.Flat)
        {
            return Icons.Material.Filled.KeyboardDoubleArrowRight;
        }

        return talentValue.ApplicationType switch
        {
            TalentValueType.Flat => Icons.Material.Filled.KeyboardArrowRight,
            TalentValueType.Stacking => Icons.Material.Filled.StackedLineChart,
            TalentValueType.MultiTarget => Icons.Material.Filled.People,
            _ => Icons.Material.Filled.Error
        };
    }

    private Color GetIconColorForValueType(TalentValueData talentValue)
    {
        return talentValue.TargetStat switch
        {
            Stat.TargetCount => Color.Info,
            Stat.ReloadSpeed => Color.Info,
            Stat.RPM => Color.Info,
            _ => Color.Error
        };
    }
}
