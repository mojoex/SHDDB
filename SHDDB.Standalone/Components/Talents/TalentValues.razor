<div>
    <MudStack Class="pa-4" AlignItems="AlignItems.Center" >
        @foreach (var talentValue in Talent.Values)
        {
            <MudPaper Width="100%" Elevation="0" Outlined>
                <MudStack Row Class="pa-2">
                    <MudIcon Icon="@GetIconForValueType(talentValue)" Color="@GetIconColorForValueType(talentValue)" />
                    <TalentValueDescription TalentValue="talentValue" ChestOverride="UseChest" BackpackOverride="UseBackpack" />
                </MudStack>
                @if (talentValue.IsConditional)
                {
                    <MudAlert Icon="@Icons.Material.Filled.Directions">@talentValue.Condition</MudAlert>
                }
                @if (!string.IsNullOrEmpty(talentValue.Note))
                {
                    <MudAlert Icon="@Icons.Material.Filled.Info">@talentValue.Note</MudAlert>
                }
            </MudPaper>
        }
    </MudStack>
</div>

@code {
    [Parameter] public required TalentData Talent { get; set; }
    [Parameter] public bool UseChest { get; set; } = false;
    [Parameter] public bool UseBackpack { get; set; } = false;

    private string GetIconForValueType(TalentValueData talentValue)
    {
        if (talentValue.TargetStat == Stat.AMP && talentValue.Type == TalentValueType.Flat)
        {
            return Icons.Material.Filled.KeyboardDoubleArrowRight;
        }

        return talentValue.Type switch
        {
            TalentValueType.Flat => Icons.Material.Filled.KeyboardArrowRight,
            TalentValueType.Stacking => Icons.Material.Filled.StackedLineChart,
            TalentValueType.MultiTarget => Icons.Material.Filled.People,
            _ => Icons.Material.Filled.Error
        };
    }

    private Color GetIconColorForValueType(TalentValueData talentValue)
    {
        return talentValue.TargetStat switch
        {
            Stat.TargetCount => Color.Info,
            Stat.ReloadSpeed => Color.Info,
            Stat.RPM => Color.Info,
            _ => Color.Error
        };
    }
}
