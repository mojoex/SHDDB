@if (ValueStat == Stat.AMP)
{
    <MudText>Amplify by <MudText HtmlTag="span" Color="@GetValueColor()">@GetValue().AsString()</MudText>%</MudText>
    @if (ValueType == TalentValueType.Stacking)
    {
        <MudText Inline>per stack, to a max of <MudText HtmlTag="span" Color="@GetStackValueColor()">@GetStackingValue()</MudText>%</MudText>
    }
}

else if (ValueStat == Stat.ReloadSpeed)
{
    <MudText>Reduce reload speed by <MudText HtmlTag="span" Color="@GetValueColor()">@GetValue().AsString()</MudText>%</MudText>
    @if (ValueType == TalentValueType.Stacking)
    {
        <MudText Inline>per stack, to a max of <MudText HtmlTag="span" Color="@GetStackValueColor()">@GetStackingValue()</MudText>%</MudText>
    }
}

else if (ValueStat == Stat.RPM)
{
    <MudText>Increase fire rate by <MudText HtmlTag="span" Color="@GetValueColor()">@GetValue().AsString()</MudText>%</MudText>
    @if (ValueType == TalentValueType.Stacking)
    {
        <MudText Inline>per stack, to a max of <MudText HtmlTag="span" Color="@GetStackValueColor()">@GetStackingValue()</MudText>%</MudText>
    }
}

else if (ValueType == TalentValueType.MultiTarget)
{
    <MudText>Transfer <MudText HtmlTag="span" Color="@GetValueColor()">@GetValue().AsString()</MudText>% damage dealt to up to <MudText HtmlTag="span" Color="@GetTargetsValueColor()">@GetTargetsValue()</MudText> marked targets</MudText>
}

else if (ValueType == TalentValueType.Flat)
{
    <MudText><MudText HtmlTag="span" Color="@GetValueColor()">@GetValue().AsString()</MudText>% added @TalentValue.TargetStat.GetString()</MudText>
}

else if (ValueType == TalentValueType.Stacking)
{
    <MudText><MudText HtmlTag="span" Color="@GetValueColor()">@GetValue().AsString()</MudText>% added @TalentValue.TargetStat.GetString() per stack, to a max of <MudText HtmlTag="span" Color="@GetStackValueColor()">@GetStackingValue()</MudText>%</MudText>
}

@code {
    [Parameter] public required TalentValueData TalentValue { get; set; }

    [Parameter] public bool ChestOverride { get; set; }

    [Parameter] public bool BackpackOverride { get; set; }

    private double BaseValue { get; set; }
    private double? ChestValue { get; set; }
    private double? BackpackValue { get; set; }

    private double TargetBaseValue { get; set; }
    private double? TargetChestValue { get; set; }
    private double? TargetBackpackValue { get; set; }

    private double StackingBaseValue { get; set; }
    private double? StackingChestValue { get; set; }
    private double? StackingBackpackValue { get; set; }

    private TalentValueType ValueType => TalentValue.Type;

    private Stat ValueStat => TalentValue.TargetStat;

    protected override void OnInitialized()
    {
        (BaseValue, ChestValue, BackpackValue) = TalentValue.GetValue();
        (TargetBaseValue, TargetChestValue, TargetBackpackValue) = TalentValue.GetTargets();
        (StackingBaseValue, StackingChestValue, StackingBackpackValue) = TalentValue.GetStacks();
    }

    private Color GetValueColor()
    {
        if (ChestOverride && ChestValue.HasValue)
        {
            return Color.Success;
        }

        if (BackpackOverride && BackpackValue.HasValue)
        {
            return Color.Success;
        }

        return Color.Default;
    }

    private Color GetStackValueColor()
    {
        if (ChestOverride && StackingChestValue.HasValue)
        {
            return Color.Success;
        }

        if (BackpackOverride && StackingBackpackValue.HasValue)
        {
            return Color.Success;
        }

        return Color.Default;
    }

    private Color GetTargetsValueColor()
    {
        if (ChestOverride && TargetChestValue.HasValue)
        {
            return Color.Success;
        }

        if (BackpackOverride && TargetBackpackValue.HasValue)
        {
            return Color.Success;
        }

        return Color.Default;
    }

    private double GetStackingValue()
    {
        if (ChestOverride && StackingChestValue.HasValue)
        {
            return Math.Round(StackingChestValue.Value * (GetValue() * 100), 2);
        }

        if (BackpackOverride && StackingBackpackValue.HasValue)
        {
            return Math.Round(StackingBackpackValue.Value * (GetValue() * 100), 2);
        }

        return Math.Round(StackingBaseValue * (GetValue() * 100), 2);
    }

    private double GetTargetsValue()
    {
        if (ChestOverride && TargetChestValue.HasValue)
        {
            return TargetChestValue.Value;
        }

        if (BackpackOverride && TargetBackpackValue.HasValue)
        {
            return TargetBackpackValue.Value;
        }

        return TargetBaseValue;
    }

    private double GetValue()
    {
        if (ChestOverride && ChestValue.HasValue)
        {
            return ChestValue.Value;
        }

        if (BackpackOverride && BackpackValue.HasValue)
        {
            return BackpackValue.Value;
        }

        return BaseValue;
    }
}
