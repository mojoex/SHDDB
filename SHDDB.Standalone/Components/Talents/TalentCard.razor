<MudPaper MinWidth="350px" MaxWidth="350px" MinHeight="125px" Elevation="3" Class="@($"{(!Standalone ? "talent-card" : "")} flex-grow-1 rounded-xl pa-2")" Style="@($"text-align: center; background: {CustomTheme.Theme.PaletteDark.Dark}")">
    <MudStack>
        <MudStack Row AlignItems="AlignItems.Center">
            @if (!Standalone)
            {
                <MudStack Row Spacing="0">
                    <MudTooltip Text="Pin Item" Delay="500" ShowOnHover Placement=Placement.Bottom>
                        <MudIconButton Class="pa-1 extra-small" OnClick="NotifyPin" Icon="@Icons.Material.Filled.PushPin" Variant="Variant.Text" Style="@(($"color: {(Pinned ? CustomTheme.Theme.PaletteDark.Tertiary : CustomTheme.Theme.PaletteDark.GrayDefault)}"))" />
                    </MudTooltip>
                    <MudTooltip Text="Popout" Delay="500" ShowOnHover Placement=Placement.Bottom>
                        <MudIconButton Class="pa-1 extra-small" Icon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Text" OnClick="NotifyOnPopout" />
                    </MudTooltip>
                </MudStack>
            }
            <MudSpacer/>
            <MudStack Row Spacing="1">
                @foreach (var talentValue in Talent.Values)
                {
                    <TalentAvatarGroup Value="talentValue" IncludeCondition />
                }
            </MudStack>
        </MudStack>
        <div class="cursor-pointer" @onclick="ToggleExpandDetails">
            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5">@Talent.Name</MudText>
                @if (Talent.Values.Any(x => !x.Complete))
                {
                    <MudTooltip Text="Talent is incomplete" ShowOnHover Placement=Placement.Bottom Delay="500">
                        <MudIcon Icon=@Icons.Material.Filled.Error Color=Color.Error Size=Size.Small />
                    </MudTooltip>
                }
            </MudStack>
        </div>
        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudChip T="string" Variant="Variant.Filled" Text="@Talent.Type.GetString()" Size="Size.Small" Style="@GetTypeChipStyle()" />
            @if (Talent.Type != TalentType.GearsetBase)
            {
                <MudChip T="string" Variant="Variant.Outlined" Text="@Talent.Slot.ToString()" Size="Size.Small" />
            }
        </MudStack>
        <MudCollapse Expanded="Expanded">
            <MudStack>
                <MudStack Row Justify="Justify.Center">
                    @if (Talent.HasChestModifier)
                    {
                        <MudTooltip Text="Toggle Chest" Arrow Placement="Placement.Bottom">
                            <MudToggleIconButton ToggledChanged="ToggleChest" Toggled="_useChest" DropShadow Size="Size.Small" Icon="@Icons.Material.Filled.Shield" ToggledColor="Color.Success" />
                        </MudTooltip>
                    }

                    @if (Talent.HasBackpackModifier)
                    {
                        <MudTooltip Text="Toggle Backpack" Arrow Placement="Placement.Bottom">
                            <MudToggleIconButton ToggledChanged="ToggleBackpack" Toggled="_useBackpack" DropShadow Size="Size.Small" Icon="@Icons.Material.Filled.Backpack" ToggledColor="Color.Success" />
                        </MudTooltip>
                    }
                </MudStack>
                <MudDivider DividerType="DividerType.Middle" />
                <TalentValues Talent="Talent" UseBackpack="_useBackpack" UseChest="_useChest" />
            </MudStack>
        </MudCollapse>
    </MudStack>
</MudPaper>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Parameter] public required TalentData Talent { get; set; }
    [Parameter] public bool Minimal { get; set; } = false;
    [Parameter] public bool Standalone { get; set; } = false;
    [Parameter] public bool Expanded { get; set; } = false;
    [Parameter] public bool Pinned { get; set; } = false;
    [Parameter] public EventCallback<string> OnPin { get; set; }
    [Parameter] public EventCallback<string> OnPopout { get; set; }
    [Parameter] public EventCallback<string> OnExpand { get; set; }

    private PreviousTalentCardParams previousParams { get; set; }

    class PreviousTalentCardParams
    {
        internal bool Expanded { get; set; }

        internal bool Pinned { get; set; }
    }

    private bool _useBackpack { get; set; } = false;
    private bool _useChest { get; set; } = false;

    private bool _shouldRender { get; set; }

    protected override void OnInitialized()
    {
        previousParams = new()
            {
                Expanded = Expanded,
                Pinned = Pinned
            };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        previousParams.Expanded = Expanded;
        previousParams.Pinned = Pinned;

        _shouldRender = false;
    }

    protected override bool ShouldRender()
    {
        return _shouldRender || previousParams.Expanded != Expanded || previousParams.Pinned != Pinned;
    }

    private async Task NotifyOnPopout()
    {
        await OnPopout.InvokeAsync(Talent.Name);
    }

    private async Task NotifyPin()
    {
        await OnPin.InvokeAsync(Talent.Name);
    }

    private async Task ToggleExpandDetails()
    {
        await OnExpand.InvokeAsync(Talent.Name);
    }

    private void ToggleChest()
    {
        _shouldRender = true;
        _useChest = !_useChest;
    }

    private void ToggleBackpack()
    {
        _shouldRender = true;
        _useBackpack = !_useBackpack;
    }

    private string GetTypeChipStyle()
    {
        return Talent.Type switch
        {
            TalentType.HighEnd => $"background: {CustomTheme.HighEnd}; color: {Colors.Shades.Black}",
            TalentType.Perfect => $"background: {CustomTheme.PerfectDarken}; color: {Colors.Shades.Black}",
            TalentType.Exotic => $"background: {CustomTheme.Exotic}; color: {Colors.Shades.Black}",
            TalentType.GearsetBase => $"background: {CustomTheme.Gearset}; color: {Colors.Shades.Black}",
            _ => ""
        };
    }

    private Color? GetValueColor(TalentValueData talentValue)
    {
        return talentValue.TargetStat switch
        {
            Stat.TargetCount => Color.Info,
            Stat.RPM => Color.Info,
            Stat.ReloadSpeed => Color.Info,
            _ => Color.Error
        };
    }

    private Variant GetValueChipVariant(TalentValueData talentValue)
    {
        if (talentValue.IsConditional)
        {
            return Variant.Outlined;
        }

        return Variant.Filled;
    }

    private string GetBorderForValueChip(TalentValueData talentValue)
    {
        if (talentValue.IsConditional)
        {
            return "border-dashed";
        }

        return string.Empty;
    }
}
