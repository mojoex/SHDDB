<MudPaper MinWidth="350px" MaxWidth="350px" MinHeight="125px" Elevation="3" Class="talent-card flex-grow-1 rounded-xl pa-2" Style="@($"text-align: center; background: {CustomTheme.Theme.PaletteDark.Dark}")">
    <MudStack>
        <MudStack Row AlignItems="AlignItems.Center">
            @if (!Standalone)
            {
                <MudStack Row Spacing="0">
                    <MudIconButton Class="pa-1 extra-small" OnClick="NotifyPin" Icon="@Icons.Material.Filled.PushPin" Variant="Variant.Text" Style="@(($"color: {(IsPinned ? CustomTheme.Theme.PaletteDark.Tertiary : CustomTheme.Theme.PaletteDark.GrayDefault)}"))" />
                    <MudIconButton Class="pa-1 extra-small" Icon="@Icons.Material.Filled.Share" Variant="Variant.Text" OnClick="ToggleSharePopover"/>
                    <MudPopover Open="@_sharePopoverOpen" AnchorOrigin="Origin.BottomCenter" RelativeWidth="DropdownWidth.Adaptive" >
                        <MudTextField T="string" AutoFocus ReadOnly Text=@GetShareLink() FullWidth />
                    </MudPopover>
                    <MudIconButton Class="pa-1 extra-small" Icon="@Icons.Material.Filled.OpenInNew" Variant="Variant.Text" OnClick="NavigateToTalent"/>
                </MudStack>
            }
            <MudSpacer/>
            <MudStack Row Spacing="1">
                @foreach (var talentValue in Talent.Values)
                {
                    <TalentAvatarGroup Value="talentValue" IncludeCondition />
                }
            </MudStack>
        </MudStack>
        <div class="cursor-pointer" @onclick="OnExpandCollapseClick">
            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5">@Talent.Name</MudText>
                @if (Talent.Values.Any(x => !x.Complete))
                {
                    <MudTooltip Text="Talent is incomplete" ShowOnHover Placement=Placement.Bottom Delay="500">
                        <MudIcon Icon=@Icons.Material.Filled.Error Color=Color.Error Size=Size.Small />
                    </MudTooltip>
                }
            </MudStack>
        </div>
        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudChip T="string" Variant="Variant.Filled" Text="@Talent.Type.GetString()" Size="Size.Small" Style="@GetTypeChipStyle()" />
            @if (Talent.Type != TalentType.GearsetBase)
            {
                <MudChip T="string" Variant="Variant.Outlined" Text="@Talent.Slot.ToString()" Size="Size.Small" />
            }
        </MudStack>
        <MudCollapse Expanded="ExpandedDetails">
            <MudStack>
                <MudStack Row Justify="Justify.Center">
                    @if (Talent.HasChestModifier)
                    {
                        <MudTooltip Text="Toggle Chest" Arrow Placement="Placement.Bottom">
                            <MudToggleIconButton @bind-Toggled="_useChest" DropShadow Size="Size.Small" Icon="@Icons.Material.Filled.Shield" ToggledColor="Color.Success" Disabled="!ExpandedDetails" />
                        </MudTooltip>
                    }

                    @if (Talent.HasBackpackModifier)
                    {
                        <MudTooltip Text="Toggle Backpack" Arrow Placement="Placement.Bottom">
                            <MudToggleIconButton @bind-Toggled="_useBackpack" DropShadow Size="Size.Small" Icon="@Icons.Material.Filled.Backpack" ToggledColor="Color.Success" Disabled="!ExpandedDetails" />
                        </MudTooltip>
                    }
                </MudStack>
                <MudDivider DividerType="DividerType.Middle" />
                <TalentValues Talent="Talent" UseBackpack="_useBackpack" UseChest="_useChest" />
            </MudStack>
        </MudCollapse>
    </MudStack>
</MudPaper>

@code {
        [Inject] private NavigationManager Navigation { get; set; }
        [Parameter] public required TalentData Talent { get; set; }
        [Parameter] public bool Minimal { get; set; } = false;
        [Parameter] public bool Standalone { get; set; } = false;
        [Parameter] public bool ExpandedDetails { get; set; } = false;
        [Parameter] public EventCallback<string> OnPin { get; set; }
        [Parameter] public bool IsPinned { get; set; }

    private bool shouldRender = false;
    private bool _useBackpack { get; set; } = false;
    private bool _useChest { get; set; } = false;
    private bool _sharePopoverOpen { get; set; } = false;

    protected override bool ShouldRender() => shouldRender;

    protected override void OnParametersSet()
    {
        shouldRender = true;
    }

    private string GetShareLink()
    {
        return $"{Navigation.BaseUri}talent/{Talent.Name}";
    }

    private void ToggleSharePopover()
    {
        _sharePopoverOpen = !_sharePopoverOpen;
    }

    private void NavigateToTalent()
    {
        Navigation.NavigateTo($"/talent/{Talent.Name}");
    }

    private async Task NotifyPin()
    {
        IsPinned = !IsPinned;

        await OnPin.InvokeAsync(Talent.Name);
    }

    private void OnExpandCollapseClick()
    {
        ExpandedDetails = !ExpandedDetails;
    }

    private string GetTypeChipStyle()
    {
        return Talent.Type switch
        {
            TalentType.HighEnd => $"background: {CustomTheme.HighEnd}; color: {Colors.Shades.Black}",
            TalentType.Perfect => $"background: {CustomTheme.PerfectDarken}; color: {Colors.Shades.Black}",
            TalentType.Exotic => $"background: {CustomTheme.Exotic}; color: {Colors.Shades.Black}",
            TalentType.GearsetBase => $"background: {CustomTheme.Gearset}; color: {Colors.Shades.Black}",
            _ => ""
        };
    }

    private Color? GetValueColor(TalentValueData talentValue)
    {
        return talentValue.TargetStat switch
        {
            Stat.TargetCount => Color.Info,
            Stat.RPM => Color.Info,
            Stat.ReloadSpeed => Color.Info,
            _ => Color.Error
        };
    }

    private Variant GetValueChipVariant(TalentValueData talentValue)
    {
        if (talentValue.IsConditional)
        {
            return Variant.Outlined;
        }

        return Variant.Filled;
    }

    private string GetBorderForValueChip(TalentValueData talentValue)
    {
        if (talentValue.IsConditional)
        {
            return "border-dashed";
        }

        return string.Empty;
    }
}
